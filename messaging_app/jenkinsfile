// messaging_app/Jenkinsfile
pipeline {
    agent any
    
    environment {
        // Python version - adjust based on your project requirements
        PYTHON_VERSION = '3.9'
        // Project directory
        PROJECT_DIR = 'messaging_app'
        // Virtual environment directory
        VENV_DIR = 'venv'
    }
    
    options {
        // Keep build logs for 30 days
        buildDiscarder(logRotator(numToKeepStr: '30'))
        // Timeout after 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'Checking out code from GitHub...'
                    // Using SSH credentials for GitHub
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']], // Adjust branch as needed
                        extensions: [],
                        userRemoteConfigs: [[
                            credentialsId: 'github-ssh-key', // Credentials ID configured in Jenkins
                            url: 'git@github.com:your-username/messaging_app.git' // Update with your repo URL
                        ]]
                    ])
                }
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                script {
                    echo 'Setting up Python virtual environment...'
                    sh """
                        python${PYTHON_VERSION} -m venv ${VENV_DIR}
                        . ${VENV_DIR}/bin/activate
                        python --version
                        pip --version
                    """
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo 'Installing Python dependencies...'
                    sh """
                        . ${VENV_DIR}/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                        # Install development dependencies if you have a dev-requirements.txt
                        if [ -f dev-requirements.txt ]; then
                            pip install -r dev-requirements.txt
                        fi
                        # Install pytest and reporting tools
                        pip install pytest pytest-django pytest-cov pytest-html
                        pip install coverage
                    """
                }
            }
        }
        
        stage('Database Setup') {
            steps {
                script {
                    echo 'Setting up database...'
                    sh """
                        . ${VENV_DIR}/bin/activate
                        cd ${PROJECT_DIR}
                        # Run migrations
                        python manage.py makemigrations
                        python manage.py migrate
                        # Create test database if needed
                        python manage.py create_test_database || true
                    """
                }
            }
        }
        
        stage('Run Tests with Pytest') {
            steps {
                script {
                    echo 'Running tests with pytest...'
                    sh """
                        . ${VENV_DIR}/bin/activate
                        cd ${PROJECT_DIR}
                        # Run tests with coverage and generate HTML report
                        pytest \
                            --cov=. \
                            --cov-report=html:coverage_html \
                            --cov-report=xml:coverage.xml \
                            --junitxml=test-results.xml \
                            --html=test-report.html \
                            --self-contained-html \
                            -v
                    """
                }
            }
            post {
                always {
                    // Always publish test results regardless of test status
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'messaging_app/test-report.html',
                        reportFiles: 'test-report.html',
                        reportName: 'Pytest HTML Report'
                    ])
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'messaging_app/coverage_html',
                        reportFiles: 'index.html',
                        reportName: 'Coverage HTML Report'
                    ])
                    junit 'messaging_app/test-results.xml'
                    cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'messaging_app/coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    echo 'Running security checks...'
                    sh """
                        . ${VENV_DIR}/bin/activate
                        # Install and run bandit for security scanning
                        pip install bandit
                        bandit -r ${PROJECT_DIR} -f html -o bandit-report.html || true
                    """
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'bandit-report.html',
                        reportFiles: 'bandit-report.html',
                        reportName: 'Security Scan Report'
                    ])
                }
            }
        }
        
        stage('Code Quality') {
            steps {
                script {
                    echo 'Running code quality checks...'
                    sh """
                        . ${VENV_DIR}/bin/activate
                        # Install and run flake8 for code quality
                        pip install flake8
                        flake8 ${PROJECT_DIR} --exit-zero > flake8-report.txt || true
                        
                        # Install and run black for code formatting check
                        pip install black
                        black --check ${PROJECT_DIR} > black-report.txt || true
                    """
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'flake8-report.txt',
                        reportName: 'Flake8 Code Quality Report',
                        reportTitles: ''
                    ])
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'black-report.txt',
                        reportName: 'Black Formatting Report',
                        reportTitles: ''
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            when {
                expression { 
                    return env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'develop'
                }
            }
            steps {
                script {
                    echo 'Building Docker image...'
                    sh """
                        # Build Docker image (if you have a Dockerfile)
                        if [ -f Dockerfile ]; then
                            docker build -t messaging-app:${BUILD_NUMBER} .
                            docker tag messaging-app:${BUILD_NUMBER} messaging-app:latest
                        fi
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'Pipeline execution completed. Cleaning up...'
                // Clean up virtual environment
                sh 'rm -rf ${VENV_DIR} || true'
                // Archive important artifacts
                archiveArtifacts artifacts: '**/test-results.xml, **/coverage.xml, **/*.html', fingerprint: true
            }
        }
        success {
            script {
                echo 'Pipeline executed successfully!'
                // You can add notifications here (Slack, Email, etc.)
                emailext (
                    subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: "The build ${env.BUILD_URL} completed successfully.",
                    to: "dev-team@yourcompany.com"
                )
            }
        }
        failure {
            script {
                echo 'Pipeline execution failed!'
                // Failure notifications
                emailext (
                    subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: "The build ${env.BUILD_URL} failed. Please check the build logs.",
                    to: "dev-team@yourcompany.com"
                )
            }
        }
        unstable {
            script {
                echo 'Pipeline execution marked as unstable!'
                // Unstable build notifications
            }
        }
    }
}