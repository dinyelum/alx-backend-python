// messaging_app/Jenkinsfile
pipeline {
    agent any
    
    environment {
        // Python version
        PYTHON_VERSION = '3.9'
        // Project directory
        PROJECT_DIR = 'messaging_app'
        // Virtual environment directory
        VENV_DIR = 'venv'
        // Docker configuration
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE_NAME = 'your-dockerhub-username/messaging-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }
    
    options {
        // Keep build logs for 30 days
        buildDiscarder(logRotator(numToKeepStr: '30'))
        // Timeout after 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'Checking out code from GitHub...'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        extensions: [],
                        userRemoteConfigs: [[
                            credentialsId: 'github-ssh-key',
                            url: 'git@github.com:your-username/messaging_app.git'
                        ]]
                    ])
                    
                    // Show git branch information
                    sh 'git branch -a'
                    sh 'git status'
                }
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                script {
                    echo 'Setting up Python virtual environment...'
                    sh """
                        python${PYTHON_VERSION} -m venv ${VENV_DIR}
                        . ${VENV_DIR}/bin/activate
                        python --version
                        pip --version
                    """
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo 'Installing Python dependencies...'
                    sh """
                        . ${VENV_DIR}/bin/activate
                        pip3 install --upgrade pip
                        pip3 install -r messaging_app/requirements.txt
                        if [ -f messaging_app/dev-requirements.txt ]; then
                            pip3 install -r messaging_app/dev-requirements.txt
                        fi
                        pip3 install pytest pytest-django pytest-cov pytest-html
                        pip3 install coverage
                    """
                }
            }
        }
        
        stage('Database Setup') {
            steps {
                script {
                    echo 'Setting up database...'
                    sh """
                        . ${VENV_DIR}/bin/activate
                        cd ${PROJECT_DIR}
                        python manage.py makemigrations
                        python manage.py migrate
                        python manage.py create_test_database || true
                    """
                }
            }
        }
        
        stage('Run Tests with Pytest') {
            steps {
                script {
                    echo 'Running tests with pytest...'
                    sh """
                        . ${VENV_DIR}/bin/activate
                        cd ${PROJECT_DIR}
                        pytest \
                            --cov=. \
                            --cov-report=html:coverage_html \
                            --cov-report=xml:coverage.xml \
                            --junitxml=test-results.xml \
                            --html=test-report.html \
                            --self-contained-html \
                            -v
                    """
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'messaging_app/test-report.html',
                        reportFiles: 'test-report.html',
                        reportName: 'Pytest HTML Report'
                    ])
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'messaging_app/coverage_html',
                        reportFiles: 'index.html',
                        reportName: 'Coverage HTML Report'
                    ])
                    junit 'messaging_app/test-results.xml'
                    cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'messaging_app/coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    // Show current git branch
                    sh 'git branch'
                    
                    // Build the Docker image
                    sh """
                        docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
                        docker build -t ${DOCKER_IMAGE_NAME}:latest .
                    """
                    
                    // List built images for verification
                    sh 'docker images | grep ${DOCKER_IMAGE_NAME}'
                }
            }
            post {
                success {
                    echo 'Docker image built successfully!'
                    sh 'docker images ${DOCKER_IMAGE_NAME}'
                }
                failure {
                    echo 'Docker image build failed!'
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                script {
                    echo 'Testing Docker image...'
                    // Run basic tests on the Docker image
                    sh """
                        # Test that the image can be run
                        docker run --rm ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} python --version
                        
                        # Test Django management commands
                        docker run --rm ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} python manage.py check --database default || true
                        
                        # Test that the application starts
                        timeout 10s docker run --rm -p 8000:8000 ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} &
                        sleep 5
                    """
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    echo 'Pushing Docker image to Docker Hub...'
                    
                    // Login to Docker Hub using Jenkins credentials
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh """
                            echo \"Logging in to Docker Hub...\"
                            echo \"${DOCKER_PASSWORD}\" | docker login -u \"${DOCKER_USERNAME}\" --password-stdin
                            
                            echo \"Pushing Docker images...\"
                            docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                            docker push ${DOCKER_IMAGE_NAME}:latest
                            
                            echo \"Logging out from Docker Hub...\"
                            docker logout
                        """
                    }
                }
            }
            post {
                success {
                    echo 'Docker image pushed successfully to Docker Hub!'
                    script {
                        // Display push confirmation
                        sh """
                            echo \"Successfully pushed:\"
                            echo \"- ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}\"
                            echo \"- ${DOCKER_IMAGE_NAME}:latest\"
                        """
                    }
                }
                failure {
                    echo 'Failed to push Docker image to Docker Hub!'
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo 'Cleaning up Docker images...'
                    // Remove local Docker images to save space
                    sh """
                        docker rmi ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || true
                        docker rmi ${DOCKER_IMAGE_NAME}:latest || true
                        docker image prune -f
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'Pipeline execution completed.'
                // Show final git branch status
                sh 'git branch'
                // Clean up virtual environment
                sh 'rm -rf ${VENV_DIR} || true'
                // Archive important artifacts
                archiveArtifacts artifacts: '**/test-results.xml, **/coverage.xml, **/*.html, **/Dockerfile', fingerprint: true
            }
        }
        success {
            script {
                echo 'Pipeline executed successfully!'
                // Success notification with Docker image info
                emailext (
                    subject: "SUCCESS: Docker Image Built - ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                    body: """
                    Build ${env.BUILD_URL} completed successfully!
                    
                    Docker Images Pushed:
                    - ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                    - ${DOCKER_IMAGE_NAME}:latest
                    
                    You can pull the image using:
                    docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                    """,
                    to: "dev-team@yourcompany.com"
                )
            }
        }
        failure {
            script {
                echo 'Pipeline execution failed!'
                // Failure notification
                emailext (
                    subject: "FAILED: Docker Build - ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                    body: "The Docker build ${env.BUILD_URL} failed. Please check the build logs.",
                    to: "dev-team@yourcompany.com"
                )
            }
        }
    }
}