# messaging_app/.github/workflows/dep.yml
name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r messaging_app/requirements.txt
        pip install pytest pytest-django pytest-cov

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -u"test_user" -p"test_password" --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done
        echo "MySQL is ready!"

    - name: Run migrations and tests
      run: |
        cd messaging_app
        python manage.py makemigrations
        python manage.py migrate
        python -m pytest --cov=. --cov-report=xml -v

  build-and-push:
    runs-on: ubuntu-latest
    needs: test  # Only build if tests pass
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/messaging-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Verify pushed images
      run: |
        echo "Successfully built and pushed the following images:"
        echo "${{ steps.meta.outputs.tags }}"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying Docker image to staging environment"
        echo "Image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/messaging-app:latest"
        # Add your staging deployment commands here
        # Example: kubectl set image deployment/messaging-app messaging-app=${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/messaging-app:latest

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying Docker image to production environment"
        echo "Image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/messaging-app:latest"
        # Add your production deployment commands here
        # Example: kubectl set image deployment/messaging-app messaging-app=${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/messaging-app:latest