# messaging_app/.github/workflows/ci.yml
name: Django CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    env:
      DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_messaging_db
      SECRET_KEY: test-secret-key-for-ci
      DEBUG: 1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r messaging_app/requirements.txt
        pip install pytest pytest-django pytest-cov coverage

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -u"test_user" -p"test_password" --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done
        echo "MySQL is ready!"

    - name: Create test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "CREATE DATABASE IF NOT EXISTS test_messaging_db;"

    - name: Run migrations
      run: |
        cd messaging_app
        python manage.py makemigrations --check --dry-run
        python manage.py makemigrations
        python manage.py migrate

    - name: Run tests with pytest and generate coverage reports
      run: |
        cd messaging_app
        python -m pytest \
          --cov=. \
          --cov-report=xml:coverage.xml \
          --cov-report=html:coverage-html \
          --cov-report=term-missing \
          --junitxml=test-results.xml \
          -v

    - name: Upload test coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          messaging_app/coverage.xml
          messaging_app/coverage-html/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          messaging_app/test-results.xml
        retention-days: 30

    - name: Upload to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./messaging_app/coverage.xml
        flags: unittests
        name: codecov-umbrella

  code-quality:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety

    - name: Run flake8 linting
      run: |
        # Run flake8 with strict settings - will fail the build if errors are found
        flake8 messaging_app/ \
          --max-line-length=88 \
          --extend-ignore=E203,W503 \
          --count \
          --show-source \
          --statistics \
          --exit-zero > flake8-report.txt || true
        
        # Check if there are any errors and fail the build if so
        if [ -s flake8-report.txt ]; then
          echo "❌ Flake8 found linting errors:"
          cat flake8-report.txt
          echo "::error::Flake8 linting failed! Check the flake8-report.txt for details."
          exit 1
        else
          echo "✅ No flake8 linting errors found!"
        fi

    - name: Run black code formatting check
      run: |
        black --check messaging_app/ --verbose

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff messaging_app/

    - name: Run bandit security scan
      run: |
        bandit -r messaging_app/ -f json -o bandit-report.json || true

    - name: Run safety dependency check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          bandit-report.json
          safety-report.json
        retention-days: 30

  coverage:
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-reports-*
        path: coverage-reports

    - name: Generate coverage summary
      run: |
        # Find the latest coverage.xml file
        COVERAGE_FILE=$(find coverage-reports -name "coverage.xml" | head -1)
        
        if [ -n "$COVERAGE_FILE" ]; then
          echo "📊 Coverage Report Summary:"
          python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('$COVERAGE_FILE')
          root = tree.getroot()
          coverage = root.attrib
          lines_covered = int(coverage['lines-covered'])
          lines_valid = int(coverage['lines-valid'])
          coverage_percent = (lines_covered / lines_valid) * 100 if lines_valid > 0 else 0
          print(f'Lines Covered: {lines_covered}/{lines_valid}')
          print(f'Coverage Percentage: {coverage_percent:.2f}%')
          
          # Set coverage threshold (fail if below 80%)
          if coverage_percent < 80:
            print('❌ Coverage below 80% threshold!')
            exit(1)
          else:
            print('✅ Coverage meets 80% threshold!')
          "
        else
          echo "No coverage file found"
          exit 1
        fi

    - name: Upload coverage summary
      uses: actions/upload-artifact@v4
      with:
        name: coverage-summary
        path: |
          coverage-reports/
        retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: [test, code-quality, coverage]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r messaging_app/requirements.txt

    - name: Run migrations check
      run: |
        cd messaging_app
        python manage.py makemigrations --check --dry-run

    - name: Collect static files
      run: |
        cd messaging_app
        python manage.py collectstatic --noinput

    - name: Success message
      run: |
        echo "🎉 All checks passed! Code quality, tests, and coverage are within acceptable ranges."

# Add workflow-level conditions
on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

# Add concurrency to prevent multiple runs for the same commit
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true